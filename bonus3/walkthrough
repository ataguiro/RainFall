# Analysis

This program opens the "/home/user/end/.pass" and reads the password (twice, but the second read results in "\0"), then it compares our first parameter (argv[1]) with the password read.
Before the comparison, it allows us to write a '\0' character anywhere in the read password, through our first argument, thanks to this code:
*(buffer + atoi(argv[1])) = 0; // buffer is where the real password is stored
At the end, the program performs a `strcmp(buffer, argv[1]);` and if the passwords are the same, a shell is executed though execl() call, if not then the program 
calls puts() with the second read buffer, which is equal to "\0" because of the password lenght, then exists.
The particular vulnerability here is the code allowing us to put a '\0' wherever we want.

# Exploit
If we give an empty string with just "\0" in int, then atoi() will return 0 and a '\0' will be placed at the beginning of the password buffer,
according to the code we analysed just above.
So the password buffer will look like : ""
Since it's the same as our argv[1] parameter ("" is a string that contains nothing, i.e a '\0'), the strcmp() check will be passed and a shell will be executed.

# Crafting

Just "" string

# Shooting

bonus3@RainFall:~$ ./bonus3 ""
$ cat /home/user/end/.pass
3321b6f81659f9a71c76616f606e4b50189cecfea611393d5d649f75e157353c
$ 
